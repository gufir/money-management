// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategories = `-- name: CreateCategories :one

INSERT INTO categories (
    id,
    name
) VALUES (
    $1,
    $2
)
RETURNING id, name
`

type CreateCategoriesParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) CreateCategories(ctx context.Context, arg CreateCategoriesParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategories, arg.ID, arg.Name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCategories = `-- name: GetCategories :many
SELECT id, name
FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
