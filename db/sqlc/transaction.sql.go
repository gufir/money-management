// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transaction" (
    id,
    user_id,
    amount,
    type,
    description,
    category_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) 
RETURNING id, user_id, amount, type, category_id, description, created_at, updated_at, deleted_at
`

type CreateTransactionParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	Amount      int64     `json:"amount"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	CategoryID  uuid.UUID `json:"category_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Type,
		arg.Description,
		arg.CategoryID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.CategoryID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, amount, type, category_id, description, created_at, updated_at, deleted_at 
FROM "transaction"
WHERE id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.CategoryID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTransactionByType = `-- name: GetTransactionByType :many
SELECT id, user_id, amount, type, category_id, description, created_at, updated_at, deleted_at
FROM "transaction"
WHERE type = $1 AND user_id = $2
`

type GetTransactionByTypeParams struct {
	Type   string    `json:"type"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetTransactionByType(ctx context.Context, arg GetTransactionByTypeParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionByType, arg.Type, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.CategoryID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByuserId = `-- name: GetTransactionByuserId :many
SELECT id, user_id, amount, type, category_id, description, created_at, updated_at, deleted_at
FROM "transaction"
WHERE user_id = $1
`

func (q *Queries) GetTransactionByuserId(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionByuserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Type,
			&i.CategoryID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE "transaction"
SET
    amount = COALESCE($1, amount),
    type = COALESCE($2, type),
    description = COALESCE($3, description),
    category_id = COALESCE($4, category_id)
WHERE
    user_id = $5
RETURNING id, user_id, amount, type, category_id, description, created_at, updated_at, deleted_at
`

type UpdateTransactionParams struct {
	Amount      pgtype.Int8 `json:"amount"`
	Type        interface{} `json:"type"`
	Description pgtype.Text `json:"description"`
	CategoryID  pgtype.UUID `json:"category_id"`
	UserID      uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.Amount,
		arg.Type,
		arg.Description,
		arg.CategoryID,
		arg.UserID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.CategoryID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
