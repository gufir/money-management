// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transaction" (
    id,
    user_id,
    amount,
    type,
    description,
    category_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) 
RETURNING id, user_id, amount, type, description, category_id, created_at, updated_at, deleted_at
`

type CreateTransactionParams struct {
	ID          uuid.UUID   `json:"id"`
	UserID      uuid.UUID   `json:"user_id"`
	Amount      int64       `json:"amount"`
	Type        string      `json:"type"`
	Description pgtype.Text `json:"description"`
	CategoryID  uuid.UUID   `json:"category_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Type,
		arg.Description,
		arg.CategoryID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.Description,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, amount, type, description, category_id, created_at, updated_at, deleted_at 
FROM "transaction"
WHERE id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.Description,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
